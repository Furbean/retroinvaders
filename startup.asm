        *=$801

        ; 10 SYS32768
        BYTE $0B, $08, $0A, $00, $9E, $33, $32, $37, $36, $38, $00, $00, $00

        *=$8000
        ; initialize the interrupt
        sei

        ; disable all rom except for IO
        lda #$35
        sta $01

        ; initialize all sprites
        jsr init_sprites
                
        ; init interrupt handler
        lda #<interrupt
        sta $fffe
        lda #>interrupt
        sta $ffff
        
        ; disable timer interrupts which can be generated by the two CIA chips.
        ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.
        lda #$7f
        sta $dc0d
        sta $dd0d

        ; by reading this two registers we negate any pending CIA irqs.
        ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq.
        ; we don't want that to happen.
        lda $dc0d
        lda $dd0d

        ; tell the VICII to generate a raster interrupt
        lda #$01
        sta $d01a

        ; tell at which rasterline we want the irq to be triggered
        lda #$50
        sta $d012

        ; as there are more than 256 rasterlines, the topmost bit of $d011 serves as
        ; the 8th bit for the rasterline we want our irq to be triggered.
        ; here we simply set up a character screen, leaving the topmost bit 0.
        lda #$1b
        sta $d011

        cli

        ; todo: sound sequencer
        ; jsr reset_sequencer
_reset_sequencer
        ; jsr init_sequencer
_play_sequencer
        ; jsr play_sequencer
        ; lda done_sequencer
        bne _play_sequencer
        jmp _reset_sequencer

